namespace = RabbitFX

; Version 5.0

[Constants]

persist global $censor = 0
global $menu = 1
global $battle = 0
global $battleCheck = 0
global $h = 0.0
global $s = 0.0
global $v = 0.0
global $brightness = 1.0
global $interpolate = 1.0
global $BLENDMODE = 0

global $temp217x
global $temp217y
global $temp217z
global $temp217w
global $temp218x
global $temp218y
global $temp218z
global $temp218w
global $temp172y
global $temp172z

global $ballFX = 0
global $ballFXCheck = 0

[KeyCensor]
key = no_modifiers \
type = cycle
$censor = 0,1

[Present]
if $battle != $battleCheck
	$battle = $battleCheck
endif
post $battleCheck = 0
if $ballFX != $ballFXCheck
	$ballFX = $ballFXCheck
endif
post $ballFXCheck = 0

[ShaderOverrideBattle]
hash = fe169a23701cd0a2
allow_duplicate_hash = overrule
$battleCheck = 1

; Resources --------------------------------------------

[ResourceFXBuffer]
type = RWBuffer
format = R32G32B32A32_FLOAT
array = 100

[ResourceDiffuse]
[ResourceNormalMap]
[ResourceLightMap]
[ResourceMaterialMap]
[ResourceCharFXMap]

; Debug ------------------------------------------------

;[ShaderOverrideDebug]
;hash = bfd6f70585ddf3bb
; Resource\Debug_cb\cb = ps-cb4

; Functions --------------------------------------------

[CommandListRun]
$temp217x = x217
$temp217y = y217
$temp217z = z217
$temp217w = w217
$temp172z = z172

x217 = ($h / 360.0) * $interpolate
y217 = ($s / 100.0) * $interpolate
z217 = ($v / 100.0) * $interpolate
w217 = $brightness
y172 = 1
z172 = $BLENDMODE

$h = 0.0
$s = 0.0
$v = 0.0
$brightness = 1.0
$interpolate = 1.0
$BLENDMODE = 0.0

[CommandListERun]
$temp218x = x218
$temp218y = y218
$temp218z = z218
$temp218w = w218

x218 = ($h / 360.0) * $interpolate
y218 = ($s / 100.0) * $interpolate
z218 = ($v / 100.0) * $interpolate
w218 = $brightness
w172 = 1

$h = 0.0
$s = 0.0
$v = 0.0
$brightness = 1.0
$interpolate = 1.0

[CommandListUpdateFXBuffer]
if $ballFX == 0
	clear = ps-u4
endif

[CommandListSetTextures]
ps-t20 = ref ResourceDiffuse
ps-t21 = ref ResourceNormalMap
ps-t22 = ref ResourceLightMap
ps-t23 = ref ResourceMaterialMap

ResourceDiffuse = null
ResourceNormalmap = null
ResourceLightmap = null
ResourceMaterialmap = null

[CommandListClear]
ps-t20 = null
ps-t21 = null
ps-t22 = null
ps-t23 = null

; Texture Slot Remapping -------------------------------

; Main

[ShaderRegexTSRMain]
shader_model = ps_4_0 ps_5_0
temps = treg0 treg1
post run = CommandListClear

[ShaderRegexTSRMain.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)
(?<body>(?:.*\n)*)
(?<Diffuse>(?<DiffuseHead>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+.\sr\d+\.\w+,\s)t\d(?<DiffuseTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))
(?<split1>\s*mul.*\nmovc.*\n)
(?<Normalmap>(?<NormalmapHead>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+.\sr\d+\.\w+,\s)t\d(?<NormalmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))
(?<split2>(?:.*\n)*)(?<Lightmap>(?<LightmapHead>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+.\sr\d+\.\w+,\s)t\d(?<LightmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))
(?<split3>\s*mov_sat.*\nmul.*\n)
(?<Materialmap>(?<MaterialmapHead>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+.\sr\d+\.\w+,\s)t\d(?<MaterialmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))

[ShaderRegexTSRMain.InsertDeclarations]
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_texture2d (float,float,float,float) t23

[ShaderRegexTSRMain.Pattern.Replace]
; Recreating the header
${header}

; Check texture slots
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t20.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t21.xyzw\n
add ${treg1}.y, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t22.xyzw\n
add ${treg1}.z, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t23.xyzw\n
add ${treg1}.w, ${treg0}.x, ${treg0}.y\n

${body}

if_nz ${treg1}.x\n
  ${DiffuseHead}t20${DiffuseTail}
else\n
  ${Diffuse}
endif\n
${split1}
if_nz ${treg1}.y\n
  ${NormalmapHead}t21${NormalmapTail}
else\n
  ${Normalmap}
endif\n
${split2}
if_nz ${treg1}.z\n
  ${LightmapHead}t22${LightmapTail}
else\n
  ${Lightmap}
endif\n
${split3}
if_nz ${treg1}.w\n
  ${MaterialmapHead}t23${MaterialmapTail}
else\n
  ${Materialmap}
endif\n

; Face

[ShaderRegexTSRFace]
shader_model = ps_4_0 ps_5_0
temps = treg0 treg1
post run = CommandListClear

[ShaderRegexTSRFace.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)
(?<body>(?:.*\n)*)
(?<Diffuse>(?<DiffuseHead>sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sv\d+\.\w+,\s)t\d(?<DiffuseTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))
(?<tail>\s*mul\sr\d+\.\w+,.*\nsample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sv\d+\.\w+,\st\d\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n(?:\s*.*\n){0,15}\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sv\d+\.\w+,\st\d+\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n)

[ShaderRegexTSRFace.InsertDeclarations]
dcl_resource_texture2d (float,float,float,float) t20

[ShaderRegexTSRFace.Pattern.Replace]
; Recreating the header
${header}

; Check texture slots
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t20.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n

${body}

if_nz ${treg1}.x\n
  ${DiffuseHead}t20${DiffuseTail}
else\n
  ${Diffuse}
endif\n

${tail}

; Transparent

[ShaderRegexTSRTransparent]
shader_model = ps_4_0 ps_5_0
temps = treg0 treg1
post run = CommandListClear

[ShaderRegexTSRTransparent.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n)(?:\s*dcl.*\n)*)(?<body>(?:.*\n)*)(?<Diffuse>(?<DiffuseHead>sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sr\d+\.\w+,\s)t\d+(?<DiffuseTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))(?<split1>mul\sr\d+\.\w+,.*\n\s*movc\sr\d+\.\w+,.*\n)(?<Normalmap>(?<NormalmapHead>sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sr\d+\.\w+,\s)t\d+(?<NormalmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))(?<split2>(?:.*\n){0,15})(?<Lightmap>(?<LightmapHead>sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sr\d+\.\w+,\s)t\d+(?<LightmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))(?<split3>\s*mov_sat\sr\d+\.\w+,.*\nmul\sr\d+\.\w+,.*\n)(?<Materialmap>(?<MaterialmapHead>sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,\sr\d+\.\w+,\s)t\d+(?<MaterialmapTail>\.\w+,\ss\d+,\scb\d+\[\d+\]\.\w+\n))

[ShaderRegexTSRTransparent.InsertDeclarations]
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_texture2d (float,float,float,float) t23

[ShaderRegexTSRTransparent.Pattern.Replace]
; Recreating the header
${header}

; Check texture slots
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t20.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t21.xyzw\n
add ${treg1}.y, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t22.xyzw\n
add ${treg1}.z, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t23.xyzw\n
add ${treg1}.w, ${treg0}.x, ${treg0}.y\n

${body}
if_nz ${treg1}.x\n
  ${DiffuseHead}t20${DiffuseTail}
else\n
  ${Diffuse}
endif\n
${split1}
if_nz ${treg1}.y\n
  ${NormalmapHead}t21${NormalmapTail}
else\n
  ${Normalmap}
endif\n
${split2}
if_nz ${treg1}.z\n
  ${LightmapHead}t22${LightmapTail}
else\n
  ${Lightmap}
endif\n
${split3}
if_nz ${treg1}.w\n
  ${MaterialmapHead}t23${MaterialmapTail}
else\n
  ${Materialmap}
endif\n

; Outline

[ShaderRegexTSROutline]
shader_model = ps_4_0 ps_5_0
temps = treg0 treg1

[ShaderRegexTSROutline.Pattern]
(?<header>\s*dcl.*v1\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)
(?<body>(?:.*\n)*)
(?<Diffuse>(?<DiffuseHead>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\) r\d+\.\w+, r\d+\.\w+, )t\d(?<DiffuseTail>\.\w+, s\d+, cb\d+\[\d+\]\.y\n))
(?<split>(?:.*\n)*)
(?<Lightmap>(?<LightmapHead>sample_b_indexable\(texture2d\)\(float,float,float,float\) r2\.xy, v1\.xyxx, )t\d(?<LightmapTail>\.xyzw, s0, cb0\[185\]\.y\n))

[ShaderRegexTSROutline.InsertDeclarations]
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t22

[ShaderRegexTSROutline.Pattern.Replace]
; Recreating the header
${header}

; Check texture slots
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t20.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t22.xyzw\n
add ${treg1}.z, ${treg0}.x, ${treg0}.y\n

${body}

if_nz ${treg1}.x\n
  ${DiffuseHead}t20${DiffuseTail}
else\n
  ${Diffuse}
endif\n
${split}
if_nz ${treg1}.z\n
  ${LightmapHead}t22${LightmapTail}
else\n
  ${Lightmap}
endif\n


; Diffuse o0 -------------------------------------------

[ShaderRegexDiffuseO0]
shader_model = ps_4_0 ps_5_0
temps = shift color ini tmask override fxbuffer treg0 treg1 treg2 treg3

[ShaderRegexDiffuseO0.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)(?<body>(?:.*\n)*)(?<output>\s*(?<function>\w{3,4})\s*o0\.xyz\,\s(?<equation>.*\n))

[ShaderRegexDiffuseO0.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_uav_raw u4
dcl_sampler s15, mode_default

[ShaderRegexDiffuseO0.Pattern.Replace]
; Recreating the header
${header}
${body}

mov ${override}.x, l(0)\n
; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n
ld_indexable(texture1d)(float,float,float,float) ${ini}.z, l(172, 0), t120.z\n

lt ${ini}.y, l(0.0), ${ini}.y\n
if_nz ${ini}.y\n

  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
    lt ${treg1}.x, ${tmask}.w, l(1.0)\n
    discard_nz ${treg1}.x\n
  endif\n

endif\n

if_nz ${ini}.y\n
  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n 
    ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(217, 0), t120.xyzw\n
  
;sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, v0.xy, t17.xyzw, s15\n

    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
      ld_raw ${fxbuffer}.xyzw, l(0), u4.xyzw\n
      add ${treg0}.x, ${fxbuffer}.x, ${fxbuffer}.y\n
      add ${treg0}.x, ${treg0}.x, ${fxbuffer}.z\n
      if_nz ${treg0}.x\n
        if_z ${ini}.z\n
          mov ${color}.xyz, ${fxbuffer}.xyz\n
        else\n
          max ${color}.xyz, ${color}.xyz, ${fxbuffer}.xyz\n
        endif\n  
	    mul ${color}.w, ${color}.w, ${fxbuffer}.w\n
      endif\n
; Hue Shift
      mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
      mov ${treg1}.zw, l(0,0,0,-0.333333)\n
      mov ${treg2}.xyzw, ${color}.xyzx\n
      mov ${treg0}.xy, ${treg2}.zyzz\n
      mov ${treg1}.xy, ${treg0}.yxyy\n
      lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
      movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
      lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
      mov ${treg3}.xyz, ${treg0}.xywx\n
      mov ${treg3}.w, ${treg2}.x\n
      mov ${treg0}.xyw, ${treg3}.wywx\n
      movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
      min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
      add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
      mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
      add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
      div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
      add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
      add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
      ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      frc ${treg0}.z, |${treg0}.z|\n
      movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
      ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
      mov ${treg0}.w, l(1.0)\n
      movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
      add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
      frc ${treg0}.yzw, ${treg0}.yyzw\n
      mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
      add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
      add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
      add ${treg0}.x, ${treg0}.x, ${shift}.z\n
      min ${treg0}.x, ${treg0}.x, l(1.0)\n
      max ${treg0}.x, ${treg0}.x, l(0.0)\n
      div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
      add ${treg1}.x, ${treg1}.x, ${shift}.y\n
      max ${treg1}.x, ${treg1}.x, l(0.0)\n
      mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
      mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
      mul ${color}.xyz, ${color}.xyz, ${color}.w\n
; Calculate final colour and glow
      if_z ${ini}.z\n
        mul o0.xyz, ${color}.xyz, ${shift}.w\n
      else\n
        ${function} ${treg0}.xyz, ${equation}\n
        max o0.xyz, ${color}.xyz, ${treg0}.xyz\n
      endif\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
${output}
endif\n

; Diffuse o1 -------------------------------------------

[ShaderRegexDiffuseO1]
shader_model = ps_4_0 ps_5_0
temps = shift color ini override treg0 treg1 treg2 treg3

post ps-t17 = null
post ps-t18 = null
post ps-u4 = null
post x217 = $temp217x
post y217 = $temp217y
post z217 = $temp217z
post w217 = $temp217w
post y172 = 0
post z172 = $temp217z

[ShaderRegexDiffuseO1.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)(?<body>(?:.*\n)*)(?<output>\s*.{3,4}\s*o1\.w.*\n)

[ShaderRegexDiffuseO1.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexDiffuseO1.Pattern.Replace]
; Recreating the header
${header}${body}
mov ${override}.x, l(0)\n

; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n

lt ${ini}.y, l(0.0), ${ini}.y\n
if_nz ${ini}.y\n
  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n 
;  sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, v0.xy, t17.xyzw, s15\n
    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
      mov o1.w, ${color}.w\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
${output}
endif\n

[ShaderRegexDiffuseO1Eye]
shader_model = ps_4_0 ps_5_0
temps = shift color ini override treg0 treg1 treg2 treg3

post ps-t17 = null
post ps-t18 = null
post ps-u4 = null
post x217 = $temp217x
post y217 = $temp217y
post z217 = $temp217z
post w217 = $temp217w
post y172 = 0
post z172 = $temp217z

[ShaderRegexDiffuseO1Eye.Pattern]
(?<header>\s*dcl.*v0\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)(?<body>(?:.*\n)*)(?<output>\s*.{3,4}\s*o1\.xyzw.*\n)

[ShaderRegexDiffuseO1Eye.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_sampler s15, mode_default

[ShaderRegexDiffuseO1Eye.Pattern.Replace]
; Recreating the header
${header}${body}
mov ${override}.x, l(0)\n

; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n

lt ${ini}.y, l(0.0), ${ini}.y\n
if_nz ${ini}.y\n
  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t17.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${color}.xyzw, ${treg0}.xy, t17.xyzw\n 
;  sample_indexable(texture2d)(float,float,float,float) ${color}.xyzw, v0.xy, t17.xyzw, s15\n
    if_nz ${color}.w\n
      mov ${override}.x, l(1)\n
      mov o1.w, ${color}.w\n
      mov o1.xyz, l(0,0,0)\n
    endif\n
  endif\n
endif\n
if_z ${override}.x\n
${output}
endif\n

; Diffuse outline --------------------------------------

[ShaderRegexOutline]
shader_model = ps_4_0 ps_5_0
temps = ini tmask treg0 treg1

[ShaderRegexOutline.Pattern]
(?<header>\s*dcl.*v1\.xyzw.*\n(?:\s*dcl.*\n)*(?:\s*dcl.*o0\.xyzw.*\n\s*dcl.*o1\.xyzw.*\n\s*dcl.*o2\.xyzw.*\n\s*dcl.*o3\.xyzw.*\n)(?:\s*dcl.*\n)*)(?<body>(?:.*\n)*)(?<output>\s*and o1.*\n\s*mov o0.*\n)

[ShaderRegexOutline.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_sampler s15, mode_default

[ShaderRegexOutline.Pattern.Replace]
; Recreating the header
${header}
${body}

; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n

lt ${ini}.y, l(0.0), ${ini}.y\n
if_nz ${ini}.y\n
  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v1.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
    lt ${treg1}.x, ${tmask}.w, l(1.0)\n
    discard_nz ${treg1}.x\n
  endif\n
endif\n
${output}

; Diffuse engine rgb extraction ------------------------

[ShaderRegexEngineFX]
shader_model = ps_4_0 ps_5_0
temps = ini treg0 treg1 treg2 treg3 color shift

post x218 = $temp218x
post y218 = $temp218y
post z218 = $temp218z
post w218 = $temp218w
post w172 = 0
$ballFXCheck = 1

[ShaderRegexEngineFX.Pattern]
(?<body>\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d\.\w+,\sr\d\.\w+,\st[789]\.\w+,\ss\d+,\scb\d\[\d+\]\.\w+\n\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d\.\w+,\sr\d\.\w+,\st[789]\.\w+,\ss\d+,\scb\d\[\d+\]\.\w+\n(?:.*\n)*\s*movc\sr\d+\.\w+,.*\n\s*movc\sr\d+\.\w+,.*\n\s*movc\sr\d+\.\w+,.*\n)(?<func1>(?<prefunc1>\s*add\sr\d\.\w+,\s)(?:(?<CB>cb\d\[\d+\]))(?<postfunc1>\.\w+,\s-cb\d+\[\d+\]\.\w+\n))(?<split>\s*mad\sr\d+\.\w+,.*\n\s*mul\sr\d\.\w+,.*\n\s*mul\sr\d\.\w+,.*\n)(?<func2>(?<prefunc2>\s*mul\sr\d\.\w+,\sr\d\.\w+,\s)cb\d\[\d+\](?<postfunc2>\.\w+\n))

[ShaderRegexEngineFX.InsertDeclarations]
dcl_uav_raw u4
dcl_resource_texture1d (float,float,float,float) t120

[ShaderRegexEngineFX.Pattern.Replace]
; Recreate the header
${body}
; Make sure that CommandListERun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.w, l(172, 0), t120.w\n

lt ${ini}.w, l(0.0), ${ini}.w\n
if_nz ${ini}.w\n
  ld_indexable(texture1d)(float,float,float,float) ${shift}.xyzw, l(218, 0), t120.xyzw\n
  mov ${color}.xyzw, ${CB}.xyzw\n
; Hue Shift
  mov ${treg0}.zw, l(0,0,-1.000000,0.666667)\n
  mov ${treg1}.zw, l(0,0,0,-0.333333)\n
  mov ${treg2}.xyzw, ${color}.xyzx\n
  mov ${treg0}.xy, ${treg2}.zyzz\n
  mov ${treg1}.xy, ${treg0}.yxyy\n
  lt ${treg2}.y, ${treg0}.y, ${treg2}.z\n
  movc ${treg0}.xyzw, ${treg2}.yyyy, ${treg0}.xyzw, ${treg1}.xyzw\n
  lt ${treg1}.x, ${treg2}.x, ${treg0}.x\n
  mov ${treg3}.xyz, ${treg0}.xywx\n
  mov ${treg3}.w, ${treg2}.x\n
  mov ${treg0}.xyw, ${treg3}.wywx\n
  movc ${treg0}.xyzw, ${treg1}.xxxx, ${treg3}.xyzw, ${treg0}.xyzw\n
  min ${treg1}.x, ${treg0}.y, ${treg0}.w\n
  add ${treg1}.x, ${treg0}.x, -${treg1}.x\n
  mad ${treg1}.y, ${treg1}.x, l(6.000000), l(0.000000)\n
  add ${treg0}.y, -${treg0}.y, ${treg0}.w\n
  div ${treg0}.y, ${treg0}.y, ${treg1}.y\n
  add ${treg0}.y, ${treg0}.y, ${treg0}.z\n
; HUE
  add ${treg0}.z, ${shift}.x, |${treg0}.y|\n
  ge ${treg0}.w, ${treg0}.z, -${treg0}.z\n
  frc ${treg0}.z, |${treg0}.z|\n
  movc ${treg0}.z, ${treg0}.w, ${treg0}.z, -${treg0}.z\n
  ge ${treg0}.w, |${treg0}.y|, l(0.266000)\n
  mov ${treg0}.w, l(1.0)\n
  movc ${treg0}.y, ${treg0}.w, ${treg0}.z, |${treg0}.y|\n
  add ${treg0}.yzw, ${treg0}.yyyy, l(0.000000, 1.000000, 0.666667, 0.333333)\n
 frc ${treg0}.yzw, ${treg0}.yyzw\n
  mad ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -3.000000, -3.000000)\n
  add_sat ${treg0}.yzw, |${treg0}.yyzw|, l(0.000000, -1.000000, -1.000000, -1.000000)\n
  add ${treg0}.yzw, ${treg0}.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)\n
  add ${treg1}.y, ${treg0}.x, l(0.000000)\n
; VAL
  add ${treg0}.x, ${treg0}.x, ${shift}.z\n
  min ${treg0}.x, ${treg0}.x, l(1.0)\n
  max ${treg0}.x, ${treg0}.x, l(0.0)\n
  div ${treg1}.x, ${treg1}.x, ${treg1}.y\n
; SAT
  add ${treg1}.x, ${treg1}.x, ${shift}.y\n
  max ${treg1}.x, ${treg1}.x, l(0.0)\n
  mad ${treg0}.yzw, ${treg1}.xxxx, ${treg0}.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)\n
  mul ${color}.xyz, ${treg0}.yzwy, ${treg0}.xxxx\n
  mul ${color}.xyz, ${color}.xyz, ${shift}.w\n
  mov ${color}.w, ${shift}.w\n
  ${prefunc1}${color}${postfunc1}
  ${split}
  ${prefunc2}${color}${postfunc2}
  store_raw u4.xyzw, l(0), ${color}.xyzw\n
else\n
  ${func1}
  ${split}
  ${func2}
endif\n

; CensorFilter -------------------------------------------

[ShaderRegexCensorFilter]
shader_model = ps_4_0 ps_5_0
temps = censor ini tmask treg0 treg1
pre x172 = $censor

post ps-t17 = null
post ps-t18 = null
post ps-u4 = null
post x217 = $temp217x
post y217 = $temp217y
post z217 = $temp217z
post w217 = $temp217w
post y172 = 0
post z172 = $temp217z

[ShaderRegexCensorFilter.Pattern]
(?<body>\s*dcl_temps\s\d+\n\s*mul\sr\d+\.\w+.*\n\s*lt\sr\d+\.\w+.*\n\s*if_nz\sr\d+\.\w+\n\s*ftou\sr\d+\.\w+.*\n\s*bfi\sr\d+\.\w+.*\n\s*bfi\sr\d+\.\w+.*\n\s*mad\sr\d+\.\w+.*\n\s*lt\sr\d+\.\w+,\sr\d+\.\w+,\sl\(\d+\.\d+\)\n)(?<discard>\s*discard_nz r\d\..+\n)(?<tail>\s*endif\n\s*lt\sr\d+\.\w+,.*\n\s*if_nz\sr\d+\.\w+\n)

[ShaderRegexCensorFilter.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t18

[ShaderRegexCensorFilter.Pattern.Replace]
\n
${body}

; Make sure that CommandListRun is being run
ld_indexable(texture1d)(float,float,float,float) ${ini}.y, l(172, 0), t120.y\n

lt ${ini}.y, l(0.0), ${ini}.y\n
if_nz ${ini}.y\n
  resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
  add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
  if_nz ${treg1}.x\n
    mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
    mov ${treg0}.zw, l(0,0)\n
    ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
    ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
    lt ${treg1}.x, ${tmask}.w, l(1.0)\n
    discard_nz ${treg1}.x\n
  endif\n
endif\n

ld_indexable(texture1d)(float,float,float,float) ${censor}.x, l(172, 0), t120.x\n
if_z ${censor}.x\n
  ${discard}
endif\n
${tail}

[ShaderRegexCensorFilterOutline]
shader_model = ps_4_0 ps_5_0
temps = censor ini tmask treg0 treg1
pre x172 = $censor

[ShaderRegexCensorFilterOutline.Pattern]
(?<body>\s*sample.*\n\s*mul .*\n\s*if_nz .*\n\s*ftou .*\n\s*bfi .*\n\s*bfi .*\n\s*.*ad .*\n)(?<discard>\s*lt r\d\..+\, r\d\..+ l\(0\.000000\)\n\s*discard_nz r\d\..+\n)(?<tail>\s*endif\n\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+,.+\n\s*mul\sr\d+\.\w+,.*\n\s*lt\sr\d+\.\w+,.*\n)

[ShaderRegexCensorFilterOutline.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t18

[ShaderRegexCensorFilterOutline.Pattern.Replace]
\n
${body}
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
if_nz ${treg1}.x\n
  mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
  mov ${treg0}.zw, l(0,0)\n
  ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
  ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
  lt ${treg1}.x, ${tmask}.w, l(1.0)\n
  discard_nz ${treg1}.x\n
endif\n

ld_indexable(texture1d)(float,float,float,float) ${censor}.x, l(172, 0), t120.x\n
if_z ${censor}.x\n
  ${discard}
endif\n
${tail}

[ShaderRegexCensorFilterEyes]
shader_model = ps_4_0 ps_5_0
temps = censor ini tmask treg0 treg1
pre x172 = $censor

[ShaderRegexCensorFilterEyes.Pattern]
(?<head>\s*dcl_output\so0.\w+\n\s*dcl_output\so1.\w+\n\s*dcl_output\so2.\w+\n\s*dcl_output\so3.\w+\n(?:\s*dcl_.*\n)*\s*dcl_temps\s\d+\n)(?<body>\s*mul\sr\d+\.\w+.*\n\s*lt\sr\d+\.\w+.*\n\s*if_nz\sr\d+\.\w+\n\s*ftou\sr\d+\.\w+.*\n\s*bfi\sr\d+\.\w+.*\n\s*bfi\sr\d+\.\w+.*\n\s*mad\sr\d+\.\w+.*\n\s*lt\sr\d+\.\w+.*\n)(?<discard>\s*discard_nz\sr\d+\.\w+\n)(?<tail>\s*endif\n\s*sample_b_indexable\(texture2d\)\(float,float,float,float\)\sr\d+\.\w+.*\n)

[ShaderRegexCensorFilterEyes.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t18

[ShaderRegexCensorFilterEyes.Pattern.Replace]
\n
${head}
${body}
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
if_nz ${treg1}.x\n
  mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
  mov ${treg0}.zw, l(0,0)\n
  ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
  ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
  lt ${treg1}.x, ${tmask}.w, l(1.0)\n
  discard_nz ${treg1}.x\n
endif\n

ld_indexable(texture1d)(float,float,float,float) ${censor}.x, l(172, 0), t120.x\n
if_z ${censor}.x\n
  ${discard}
endif\n
${tail}

[ShaderRegexCensorFilterTransparent]
shader_model = ps_4_0 ps_5_0
temps = censor ini tmask treg0 treg1
pre x172 = $censor

[ShaderRegexCensorFilterTransparent.Pattern]
(?<body>\s*movc\sr\d+\.\w+,.*\n\s*mul\sr\d+\.\w+,.+\n\s*lt\sr\d+\.\w+,.*\n\s*if_nz\sr\d+\.\w+\s*ftou\sr\d+\.\w+,.*\n\s*bfi\sr\d+\.\w+,.*\n\s*bfi\sr\d+\.\w+,.*\n\s*mad\sr\d+\.\w+,.*\n\s+lt\sr\d+\.\w+,.*\n)(?<discard>\s*discard_nz\sr\d+\.\w+\n)(?<tail>\s*endif\n\s*lt\sr\d+\.\w+,.*\n\s*ieq\sr\d+\.\w+,.*\n)

[ShaderRegexCensorFilterTransparent.InsertDeclarations]
dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t18

[ShaderRegexCensorFilterTransparent.Pattern.Replace]
\n
${body}
resinfo_indexable(texture2d)(float,float,float,float) ${treg0}.xyyy, l(0), t18.xyzw\n
add ${treg1}.x, ${treg0}.x, ${treg0}.y\n
if_nz ${treg1}.x\n
  mul ${treg0}.xyyy, ${treg0}.xyyy, v0.xyyy%1\n
  mov ${treg0}.zw, l(0,0)\n
  ftoi ${treg0}.xyyy, ${treg0}.xyyy\n
  ld_aoffimmi_indexable(1,1,1)(texture2d)(float,float,float,float) ${tmask}.xyzw, ${treg0}.xy, t18.xyzw\n 
  lt ${treg1}.x, ${tmask}.w, l(1.0)\n
  discard_nz ${treg1}.x\n
endif\n

ld_indexable(texture1d)(float,float,float,float) ${censor}.x, l(172, 0), t120.x\n
if_z ${censor}.x\n
  ${discard}
endif\n
${tail}